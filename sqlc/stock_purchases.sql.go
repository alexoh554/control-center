// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: stock_purchases.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createStockPurchase = `-- name: CreateStockPurchase :one
INSERT INTO stock_purchases(
    symbol,
    price_cents,
    quantity,
    purchased_at,
    total_price_cents,
    broker
)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, symbol, quantity, purchased_at, broker, price_cents, total_price_cents
`

type CreateStockPurchaseParams struct {
	Symbol          string         `json:"symbol"`
	PriceCents      int32          `json:"price_cents"`
	Quantity        int32          `json:"quantity"`
	PurchasedAt     time.Time      `json:"purchased_at"`
	TotalPriceCents int32          `json:"total_price_cents"`
	Broker          sql.NullString `json:"broker"`
}

func (q *Queries) CreateStockPurchase(ctx context.Context, arg CreateStockPurchaseParams) (StockPurchase, error) {
	row := q.db.QueryRowContext(ctx, createStockPurchase,
		arg.Symbol,
		arg.PriceCents,
		arg.Quantity,
		arg.PurchasedAt,
		arg.TotalPriceCents,
		arg.Broker,
	)
	var i StockPurchase
	err := row.Scan(
		&i.ID,
		&i.Symbol,
		&i.Quantity,
		&i.PurchasedAt,
		&i.Broker,
		&i.PriceCents,
		&i.TotalPriceCents,
	)
	return i, err
}

const deleteStockPurchase = `-- name: DeleteStockPurchase :exec
DELETE FROM stock_purchases
WHERE id=$1
`

func (q *Queries) DeleteStockPurchase(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteStockPurchase, id)
	return err
}

const getStockPurchases = `-- name: GetStockPurchases :many
SELECT id, symbol, quantity, purchased_at, broker, price_cents, total_price_cents FROM stock_purchases
`

func (q *Queries) GetStockPurchases(ctx context.Context) ([]StockPurchase, error) {
	rows, err := q.db.QueryContext(ctx, getStockPurchases)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StockPurchase{}
	for rows.Next() {
		var i StockPurchase
		if err := rows.Scan(
			&i.ID,
			&i.Symbol,
			&i.Quantity,
			&i.PurchasedAt,
			&i.Broker,
			&i.PriceCents,
			&i.TotalPriceCents,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
