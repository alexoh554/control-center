// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tasks.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (title, description, status)
VALUES ($1, $2, $3)
RETURNING id, title, status, created_at, deleted_at, description
`

type CreateTaskParams struct {
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Status      sql.NullString `json:"status"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask, arg.Title, arg.Description, arg.Status)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Status,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.Description,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :one
UPDATE tasks
SET deleted_at=CURRENT_TIMESTAMP
WHERE id=$1
RETURNING id, title, status, created_at, deleted_at, description
`

func (q *Queries) DeleteTask(ctx context.Context, id uuid.UUID) (Task, error) {
	row := q.db.QueryRowContext(ctx, deleteTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Status,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.Description,
	)
	return i, err
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET 
    title = COALESCE($1, title),
    description = COALESCE($2, description),
    status = COALESCE($3, status)
WHERE id = $4
RETURNING id, title, status, created_at, deleted_at, description
`

type UpdateTaskParams struct {
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Status      sql.NullString `json:"status"`
	ID          uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.ID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Status,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.Description,
	)
	return i, err
}
